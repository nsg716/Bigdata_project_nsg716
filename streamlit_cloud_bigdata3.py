# -*- coding: utf-8 -*-
"""streamlit_cloud_bigdata3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Iyq5rHYSMcBNsDVZ5u58URtY3bVJuD40
"""

import pandas as pd
from sklearn.metrics import r2_score
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import cross_val_score
from matplotlib import font_manager
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

# Nanum Gothic 폰트 설정
font_path = "NanumGothic.ttf"
font_prop = font_manager.FontProperties(fname=font_path)
plt.rc('font', family=font_prop.get_name())



def analyze_income_asset_consumption(consumption_data, asset_data, income_data, font_path="NanumGothic.ttf"):
    # Nanum Gothic 폰트 설정
    font_prop = font_manager.FontProperties(fname=font_path)
    plt.rc('font', family=font_prop.get_name())
    
    # DataFrame으로 변환
    consumption_df = pd.DataFrame(consumption_data)
    asset_df = pd.DataFrame(asset_data)
    income_df = pd.DataFrame(income_data)

    # 데이터 병합
    merged_df = pd.DataFrame()
    for year in range(2012, 2022):
        temp_df = pd.DataFrame({
            '소득분위별': consumption_df['소득분위별'],
            '연도': year,
            '소비': consumption_df[str(year)],
            '자산': asset_df[str(year)],
            '소득': income_df[str(year)]
        })
        merged_df = pd.concat([merged_df, temp_df])

    # Streamlit 앱 시작
    st.title("소득, 자산, 소비 데이터 분석")

    # 독립 변수와 종속 변수 선택
    X = merged_df[['자산', '소비']]
    y = merged_df['소득']

    # 데이터 분할 (학습 데이터와 테스트 데이터)
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # 선형 회귀 모델 생성
    model = LinearRegression()

    # 모델 훈련
    model.fit(X_train, y_train)

    # 예측
    y_pred = model.predict(X_test)

    # R² 점수 계산
    r2 = r2_score(y_test, y_pred)
    st.write(f'R² 점수: {r2}')

    # 모델 평가 (평균 제곱 오차)
    mse = mean_squared_error(y_test, y_pred)
    st.write("Mean Squared Error:", mse)

    # 회귀 계수 확인
    st.write("Intercept (절편):", model.intercept_)

    # 모델의 계수 가져오기
    asset_coef, consume_coef = model.coef_

    # 계수를 설명과 함께 출력
    st.write(f"Coefficients (계수):")
    st.write(f"  자산: {asset_coef:.4f}")
    st.write(f"  소비: {consume_coef:.4f}")

    # 사용자 입력 받기
    asset = st.number_input("현재 (혹은 예상)자산을 입력하세요 (단위 만 원):", min_value=0, value=0, step=100)
    consumption = st.number_input("현재 (혹은 예상) 1년당 소비를 입력하세요 (단위 만 원):", min_value=0, value=0, step=100)

    # 데이터 준비
    data_input = [[asset, consumption]]
    predicted_income_data = model.predict(data_input)

    # 연도별로 데이터 정리
    years = [year for year in income_data.keys() if year.isnumeric()]
    income_values = [income_data[year] for year in years]
    predicted_incomes = [predicted_income_data for _ in years]

    # 그래프 그리기
    fig, ax = plt.subplots(figsize=(10, 6))
    for i in range(5):  # 5개의 소득 분위
        ax.plot(years, [income[i] for income in income_values], label=income_data['소득5분위'][i])
    ax.plot(years, predicted_incomes, label='예측 소득', linestyle='--', color='red')
    ax.set_xlabel('연도', fontproperties=font_prop)
    ax.set_ylabel('소득', fontproperties=font_prop)
    ax.set_title('연도별 소득 분위', fontproperties=font_prop)
    ax.legend(prop=font_prop)
    plt.xticks(rotation=45)  # x축 레이블 회전
    plt.grid(True)
    plt.tight_layout()  # 그래프 레이아웃 조정

    # Streamlit을 사용하여 그래프 표시
    st.pyplot(fig)

    st.write(f"1년 예상 소득 (만 원): {str(*predicted_income_data)}")

    # 각 연도별로 소득 분위와 예측 소득 사이의 차이를 백분율로 계산 및 표시
    for year, incomes, predicted_income in zip(years, income_values, predicted_incomes):
        st.write(f"{year}년도 소득 분위별 차이 (%):")
        for i, income in enumerate(incomes):
            # 예측 소득과 실제 소득 사이의 차이를 백분율로 계산
            difference_percentage = ((predicted_income[0] - income) / income) * 100
            st.write(f"  소득 {i+1}분위: {difference_percentage:.2f}%")
        st.write("")
