# -*- coding: utf-8 -*-
"""자산,소비에 따른 소득분위 예측(서술 + 예측 분석).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hK8o0GZhn2OFU-ajBKKCQDTtUoYMnLT4
"""

from google.colab import drive
drive.mount('/content/drive')

!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import font_manager, rc


plt.rc('font', family='NanumBarunGothic')

file_path01 = ("/content/drive/MyDrive/Bigdata_TermProject_data/2007~2021/소득5분위별_연간_소비지출_20240520010258.csv")
file_path02 = ("/content/drive/MyDrive/Bigdata_TermProject_data/2012~2023(자산,부채,소득)/소득5분위별_가계재무건전성.csv")

df01 = pd.read_csv(file_path01,encoding='cp949')
# 멀티인덱스를 사용하여 데이터를 읽어옴
df02 = pd.read_csv(file_path02, encoding='cp949')


# 구조 파악
print(df01.shape)
print(df02.shape)


# 데이터프레임 정보 출력
print("\ndf01 정보:")
print(df01.info())

print("\ndf02 정보:")
print(df02.info())

# 결측치 확인
print("df01 결측치 확인:")
print(df01.isnull().sum())

print("\ndf02 결측치 확인:")
print(df02.isnull().sum())

#데이터 5개 확인
print(df01.head())
print(df02.head())

#소비
file_path1 = ("/content/drive/MyDrive/Bigdata_TermProject_data/2007~2021/(정제)소득5분위별_연간_소비지출_20240520010258.csv")

#자산,소득 정제된 자료를 사용 - 이 데이터를 사용한 이유 자산과 소득이 같은 기준으로 정리된 테이블이 필요하기 때문 또한 표본이 인구주택총조사에서 따온것이며 이 자료는 모집단을 선정한 자료이기 때문에 연관성이 높다.
file_path2 = ("/content/drive/MyDrive/Bigdata_TermProject_data/2012~2023(자산,부채,소득)/(정제-자산)소득5분위별_가계재무건전성.csv")
file_path3 = ("/content/drive/MyDrive/Bigdata_TermProject_data/2012~2023(자산,부채,소득)/(정제-소득)소득5분위별_가계재무건전성.csv")

import pandas as pd

# 데이터프레임 생성
df1 = pd.read_csv(file_path1,encoding='cp949')
df2 = pd.read_csv(file_path2, encoding='cp949')
df3 = pd.read_csv(file_path3, encoding='cp949')

# 구조 파악
print(df1.shape)
print(df2.shape)
print(df3.shape)


# 데이터프레임 정보 출력
print("\ndf1 정보:")
print(df1.info())

print("\ndf2 정보:")
print(df2.info())

print("\ndf3 정보:")
print(df3.info())




# 결측치 확인
print("df1 결측치 확인:")
print(df1.isnull().sum())

print("\ndf2 결측치 확인:")
print(df2.isnull().sum())

print("\ndf3 결측치 확인:")
print(df3.isnull().sum())


print(df1.head())
print(df2.head())
print(df3.head())

data = {
    '소득분위별(1)': ['1분위', '2분위', '3분위', '4분위', '5분위'],
    '2007 소비': [518.0, 824.6, 1010.2, 1223.8, 1604.4],
    '2008 소비': [694.9, 925.9, 1287.5, 1501.9, 1962.0],
    '2009 소비': [758.5, 991.4, 1333.1, 1553.7, 1955.0],
    '2010 소비': [760.6, 1064.7, 1385.3, 1646.3, 2173.0],
    '2011 소비': [719.3, 1055.3, 1347.6, 1652.1, 2035.1],
    '2012 소비': [768.8, 1056.1, 1380.2, 1700.7, 2180.1],
    '2013 소비': [739.3, 1053.5, 1436.8, 1722.9, 2288.6],
    '2014 소비': [772.3, 1116.5, 1432.3, 1771.9, 2242.9],
    '2015 소비': [783.9, 1134.2, 1465.7, 1771.8, 2342.9],
    '2016 소비': [830.8, 1161.6, 1479.8, 1828.7, 2377.4],
    '2017 소비': [857.5, 1214.4, 1559.2, 1907.6, 2405.6],
    '2018 소비': [894.1, 1322.7, 1571.2, 1896.4, 2485.3],
    '2019 소비': [933.2, 1294.7, 1650.9, 1933.0, 2478.5],
    '2020 소비': [859.6, 1218.6, 1552.2, 1814.2, 2348.6],
    '2021 소비': [964.3, 1295.2, 1616.4, 1884.3, 2384.9]
}

data = {
    '소득5분위': ['소득1분위', '소득2분위', '소득3분위', '소득4분위', '소득5분위'],
    '2012 자산': [9840, 16894, 23556, 34775, 76545],
    '2013 자산': [10034, 18056, 24422, 35758, 75153],
    '2014 자산': [10951, 19122, 25294, 36735, 75573],
    '2015 자산': [11908, 19561, 26944, 37927, 77073],
    '2016 자산': [11954, 20228, 28608, 40466, 81917],
    '2017 자산': [12420, 21994, 31735, 44109, 83094],
    '2018 자산': [13522, 23629, 34849, 46668, 91492],
    '2019 자산': [13146, 23780, 35464, 48891, 94663],
    '2020 자산': [13629, 25523, 36076, 49422, 98054],
    '2021 자산': [16500, 28682, 39673, 56447, 109952],
    '2022 자산': [16911, 30562, 43724, 61553, 121088],
    '2023 자산': [17287, 28567, 41948, 58361, 117458],
}

data = {
    '소득5분위': ['소득1분위', '소득2분위', '소득3분위', '소득4분위', '소득5분위'],
    '2012 소득': [683, 1705, 2805, 4173, 8014],
    '2013 소득': [713, 1814, 2975, 4406, 8343],
    '2014 소득': [721, 1951, 3160, 4630, 8632],
    '2015 소득': [765, 1999, 3262, 4778, 8826],
    '2016 소득': [796, 2064, 3347, 4929, 8969],
    '2017 소득': [867, 2183, 3650, 5560, 10339],
    '2018 소득': [918, 2275, 3760, 5709, 10692],
    '2019 소득': [958, 2316, 3850, 5792, 10728],
    '2020 소득': [1009, 2369, 3942, 5916, 10855],
    '2021 소득': [1170, 2582, 4174, 6166, 11194],
    '2022 소득': [1198, 2679, 4319, 6454, 11775],
    '2023 소득': [1237, 2821, 4530, 6701, 12120],
}

import pandas as pd
from sklearn.metrics import r2_score
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import cross_val_score
import statsmodels.api as sm

# 주어진 데이터
consumption_data = {
    '소득분위별': ['1분위', '2분위', '3분위', '4분위', '5분위'],
    '2012': [768.8, 1056.1, 1380.2, 1700.7, 2180.1],
    '2013': [739.3, 1053.5, 1436.8, 1722.9, 2288.6],
    '2014': [772.3, 1116.5, 1432.3, 1771.9, 2242.9],
    '2015': [783.9, 1134.2, 1465.7, 1771.8, 2342.9],
    '2016': [830.8, 1161.6, 1479.8, 1828.7, 2377.4],
    '2017': [857.5, 1214.4, 1559.2, 1907.6, 2405.6],
    '2018': [894.1, 1322.7, 1571.2, 1896.4, 2485.3],
    '2019': [933.2, 1294.7, 1650.9, 1933.0, 2478.5],
    '2020': [859.6, 1218.6, 1552.2, 1814.2, 2348.6],
    '2021': [964.3, 1295.2, 1616.4, 1884.3, 2384.9]
}

asset_data = {
    '소득5분위': ['소득1분위', '소득2분위', '소득3분위', '소득4분위', '소득5분위'],
    '2012': [9840, 16894, 23556, 34775, 76545],
    '2013': [10034, 18056, 24422, 35758, 75153],
    '2014': [10951, 19122, 25294, 36735, 75573],
    '2015': [11908, 19561, 26944, 37927, 77073],
    '2016': [11954, 20228, 28608, 40466, 81917],
    '2017': [12420, 21994, 31735, 44109, 83094],
    '2018': [13522, 23629, 34849, 46668, 91492],
    '2019': [13146, 23780, 35464, 48891, 94663],
    '2020': [13629, 25523, 36076, 49422, 98054],
    '2021': [16500, 28682, 39673, 56447, 109952]
}

income_data = {
    '소득5분위': ['소득1분위', '소득2분위', '소득3분위', '소득4분위', '소득5분위'],
    '2012': [683, 1705, 2805, 4173, 8014],
    '2013': [713, 1814, 2975, 4406, 8343],
    '2014': [721, 1951, 3160, 4630, 8632],
    '2015': [765, 1999, 3262, 4778, 8826],
    '2016': [796, 2064, 3347, 4929, 8969],
    '2017': [867, 2183, 3650, 5560, 10339],
    '2018': [918, 2275, 3760, 5709, 10692],
    '2019': [958, 2316, 3850, 5792, 10728],
    '2020': [1009, 2369, 3942, 5916, 10855],
    '2021': [1170, 2582, 4174, 6166, 11194]
}



# DataFrame으로 변환
consumption_df = pd.DataFrame(consumption_data)
asset_df = pd.DataFrame(asset_data)
income_df = pd.DataFrame(income_data)

# 데이터 병합
merged_df = pd.DataFrame()

for year in range(2012, 2022):
    temp_df = pd.DataFrame({
        '소득분위별': consumption_df['소득분위별'],
        '연도': year,
        '소비': consumption_df[str(year)],
        '자산': asset_df[str(year)],
        '소득': income_df[str(year)]
    })
    merged_df = pd.concat([merged_df, temp_df])

# 독립 변수와 종속 변수 선택
X = merged_df[['자산', '소비']]
y = merged_df['소득']

# 결과를 저장할 DataFrame 준비
results_df = pd.DataFrame(columns=['Test Size', 'R2 Score', 'MSE', 'P-Value'])

for test_size in np.arange(0.1, 0.51, 0.01):
    # 데이터 분할
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=0)

    # 선형 회귀 모델 생성 및 훈련
    model = LinearRegression()
    model.fit(X_train, y_train)

    # 예측 및 평가
    y_pred = model.predict(X_test)
    r2 = r2_score(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)

    # F-검정 유의확률 계산
    X_train_sm = X_train  # 상수항이 이미 포함되어 있으므로 sm.add_constant() 불필요
    model_sm = sm.OLS(y_train, X_train_sm).fit()
    f_pvalue = model_sm.f_pvalue

    # 결과 저장
    results_df.loc[len(results_df)] = [test_size, r2, mse, f_pvalue]

# 결과 출력
print(results_df)

# r2가 가장 높은 행 출력
best_r2_row = results_df.loc[results_df['R2 Score'].idxmax()]
print("\nBest R2 Score:")
print(best_r2_row)

# mse가 가장 낮은 행 출력
best_mse_row = results_df.loc[results_df['MSE'].idxmin()]
print("\nLowest MSE:")
print(best_mse_row)

# f_pvalue가 가장 낮은 행 출력
best_pvalue_row = results_df.loc[results_df['P-Value'].idxmin()]
print("\nLowest P-Value:")
print(best_pvalue_row)

# 데이터 분할 (학습 데이터와 테스트 데이터)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.13, random_state=0)

# 선형 회귀 모델 생성
model = LinearRegression()

# 모델 훈련
model.fit(X_train, y_train)

# 예측
y_pred = model.predict(X_test)

# R² 점수 계산
r2 = r2_score(y_test, y_pred)
adj_r2 = 1 - (1 - r2) * (len(y_train) - 1) / (len(y_train) - X_train.shape[1] - 1)

# F-검정 유의확률 계산
f_statistic = model_sm.fvalue
f_pvalue = model_sm.f_pvalue

print(f"R-squared:\t{r2:.3f}")
print(f"Adj. R-squared:\t{adj_r2:.3f}")
print(f"F-statistic:\t{f_statistic:.2f}")
print(f"P - Value:\t{f_pvalue}")

# 모델 평가 (평균 제곱 오차)
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error (MSE):", mse)
# 평균 제곱근 오차 (RMSE) 계산
rmse = mean_squared_error(y_test, y_pred, squared=False)
print(f"Root Mean Squared Error (RMSE): {rmse:.3f}")

# 회귀 계수 확인
print("Intercept (절편):", model.intercept_)
print("Coefficients (계수 : 자산, 소비):", model.coef_)

"""R² 점수 계산

r2_score(y_test, y_pred): 테스트 데이터의 실제값(y_test)과 예측값(y_pred)을 이용하여 R² 점수를 계산합니다. R²는 모델의 설명력을 나타내는 지표로, 0에서 1 사이의 값을 가집니다.

adj_r2 = 1 - (1 - r2) * (len(y_train) - 1) / (len(y_train) - X_train.shape[1] - 1): 조정된 R² 점수를 계산합니다. 조정된 R²는 모델에 포함된 변수 개수를 고려하여 계산되므로, 모델의 복잡도를 반영할 수 있습니다.

F-검정 유의확률 계산

X_train_sm = sm.add_constant(X_train): 학습 데이터 X_train에 상수항을 추가합니다. 이는 statsmodels 라이브러리에서 OLS(Ordinary Least Squares) 회귀 모델을 적합할 때 필요한 작업입니다.

model_sm = sm.OLS(y_train, X_train_sm).fit(): OLS 회귀 모델을 적합합니다.

f_statistic = model_sm.fvalue: F-검정 통계량을 계산합니다. F-검정 통계량은 모델의 전체적인 유의성을 나타냅니다.

f_pvalue = model_sm.f_pvalue: F-검정 유의확률을 계산합니다. 이 값이 유의수준(일반적으로 0.05) 보다 작으면 모델이 통계적으로 유의하다고 판단할 수 있습니다.
"""

import matplotlib.pyplot as plt


asset = int(input("현재 (혹은 예상)자산을 입력하세요 (단위 만 원): "))
consumption = int(input("현재 (혹은 예상) 1년당 소비를 입력하세요 (단위 만 원)): "))
data_input = [[asset,consumption]]
predicted_income_data = model.predict(data_input)

income_data = {
    '소득5분위': ['소득1분위', '소득2분위', '소득3분위', '소득4분위', '소득5분위'],
    '2012': [683, 1705, 2805, 4173, 8014],
    '2013': [713, 1814, 2975, 4406, 8343],
    '2014': [721, 1951, 3160, 4630, 8632],
    '2015': [765, 1999, 3262, 4778, 8826],
    '2016': [796, 2064, 3347, 4929, 8969],
    '2017': [867, 2183, 3650, 5560, 10339],
    '2018': [918, 2275, 3760, 5709, 10692],
    '2019': [958, 2316, 3850, 5792, 10728],
    '2020': [1009, 2369, 3942, 5916, 10855],
    '2021': [1170, 2582, 4174, 6166, 11194]
}

# 연도별로 데이터 정리
years = [year for year in income_data.keys() if year.isnumeric()]
income_values = [income_data[year] for year in years]
#데이터 보정
predicted_incomes = [predicted_income_data for _ in years]

# 그래프 그리기
plt.figure(figsize=(10, 6))
for i in range(5):  # 5개의 소득 분위
    plt.plot(years, [income[i] for income in income_values], label=income_data['소득5분위'][i])
plt.plot(years, predicted_incomes, label='예측 소득', linestyle='--', color='red')
plt.xlabel('연도')
plt.ylabel('소득')
plt.title('연도별 소득 분위')
plt.legend()
plt.xticks(rotation=45)  # x축 레이블 회전
plt.grid(True)
plt.tight_layout()  # 그래프 레이아웃 조정
plt.show()

print("1년 예상 소득 (만 원):" + str(*predicted_income_data))
# 각 연도별로 소득 분위와 예측 소득 사이의 차이를 백분율로 계산
for year, incomes, predicted_income in zip(years, income_values, predicted_incomes):
    print(f"{year}년도 소득 분위별 차이 (%):")
    for i, income in enumerate(incomes):
        # 예측 소득과 실제 소득 사이의 차이를 백분율로 계산
        difference_percentage = ((predicted_income[0] - income) / income) * 100
        print(f"  소득 {i+1}분위: {difference_percentage:.2f}%")
    print()

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from matplotlib import font_manager, rc


plt.rc('font', family='NanumBarunGothic')


# 데이터 준비
income_data = {
    '소득5분위': ['소득1분위', '소득2분위', '소득3분위', '소득4분위', '소득5분위'],
    '2012': [683, 1705, 2805, 4173, 8014],
    '2013': [713, 1814, 2975, 4406, 8343],
    '2014': [721, 1951, 3160, 4630, 8632],
    '2015': [765, 1999, 3262, 4778, 8826],
    '2016': [796, 2064, 3347, 4929, 8969],
    '2017': [867, 2183, 3650, 5560, 10339],
    '2018': [918, 2275, 3760, 5709, 10692],
    '2019': [958, 2316, 3850, 5792, 10728],
    '2020': [1009, 2369, 3942, 5916, 10855],
    '2021': [1170, 2582, 4174, 6166, 11194]
}

# 선형 회귀 모델 학습
years = [year for year in income_data.keys() if year.isnumeric()]
income_values = [income_data[year] for year in years]

X = np.array([int(year) for year in years]).reshape(-1, 1)
models = []

for i in range(5):
    y = np.array([income[i] for income in income_values])
    model = LinearRegression()
    model.fit(X, y)
    models.append(model)


for i, model in enumerate(models):
    y_true = np.array([income[i] for income in income_values])
    y_pred = model.predict(X)
    r2 = r2_score(y_true, y_pred)
    print(f"소득{i+1}분위 모델 R2 스코어: {r2:.6f}")
    print(f"소득{i+1}분위 모델 계수:")
    print(f"  기울기: {model.coef_[0]:.2f}")
    print(f"  절편: {model.intercept_:.2f}")

future_years = list(range(2022, 2027))
future_incomes = []

for i in range(5):
    future_income = []
    for year in future_years:
        income = models[i].predict([[year]])
        future_income.append(income[0])
    future_incomes.append(future_income)

future_incomes_T = np.array(future_incomes).T.tolist()

for i in range(5):
    print(f"소득 {i+1}분위 예측 결과:")
    for j, year in enumerate(future_years):
        print(f"{year}년도 예상 소득: {future_incomes[i][j]:.2f} 만 원")
    print()

predicted_incomes = [predicted_income_data for _ in future_years]


# 차트 생성
plt.figure(figsize=(12, 6))
for i in range(5):
    plt.plot(future_years, future_incomes[i], label=income_data['소득5분위'][i])
plt.plot(future_years, predicted_incomes, label='예측 소득', linestyle='--', color='red')
plt.xlabel('년도')
plt.ylabel('소득 (만 원)')
plt.title('소득 분위별 예측 결과')
plt.legend()
plt.show()



for year, incomes, future_income in zip(future_years, predicted_incomes, future_incomes_T):
    print(f"{year}년도 소득 분위별 차이 (%):")
    min_difference = float('inf')
    min_difference_percentage = 0
    for i in range(5):
        for j in range(5):
            difference = future_income[i] - incomes
            difference_percentage = (difference / incomes) * 100
            if abs(difference_percentage) < abs(min_difference):
              min_difference = difference_percentage
              min_difference_percentage = difference_percentage
        print(f"  소득 {i+1}분위: {float(difference_percentage):.2f}%")
    print(f"  이 년도 중 가장 가까운 차이: {float(min_difference_percentage):.2f}%")
    print()