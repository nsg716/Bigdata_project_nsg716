# -*- coding: utf-8 -*-
"""소득 분위 및 조건을 통한 경제적 위치 확인(서술분석).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h2-Ns3r4Iw-6oLidB243BXimc_dmlufr
"""

from google.colab import drive
drive.mount('/content/drive')

!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import font_manager, rc


plt.rc('font', family='NanumBarunGothic')

file_path01 = ("/content/drive/MyDrive/Bigdata_TermProject_data/2007~2021/소득5분위별_가구주_특성_20240520010215.csv")

# 데이터프레임 생성
df01 = pd.read_csv(file_path01,encoding='cp949')



# 구조 파악
print(df01.shape)

# 데이터프레임 정보 출력
print("\ndf01 정보:")
print(df01.info())


# 결측치 확인
print("\ndf01 결측치 확인:")
print(df01.isnull().sum())

print(df01.head())

file_path1 = ("/content/drive/MyDrive/Bigdata_TermProject_data/2007~2021/(정제)소득5분위별_가구주_특성_20240520010215.csv")

import pandas as pd

# 데이터프레임 생성
df1 = pd.read_csv(file_path1,encoding='cp949')
print(df1.to_dict())
# 구조 파악
print(df1.shape)

# 데이터프레임 정보 출력
print("\ndf1 정보:")
print(df1.info())


# 결측치 확인
print("df1 결측치 확인:")
print(df1.isnull().sum())

print(df1.head())

#print(df1.describe()) 인텍스가 3단계로 구분되어있고, 헤더는 2단계가 있다.그래서 이 함수를 사용하기에는 부적합하다.

"""○ 원표본 추출틀

- 기본 표본추출틀: 통계청 2005년 인구주택총조사(261,237개 조사구의 15,707,929가구)

- 보조 표본추출틀: 2005~2008년 사이에 신축하여 입주한 아파트 정보(78개 단지의 53,194세대)

○ 신규표본 추출틀

- 기본 표본추출틀: 통계청 2018년 인구주택총조사(367,874개 조사구의 20,364,055가구)

- 보조 표본추출틀: 2018년 11월 이후 신축하여 입주한 아파트 정보(1,429개 단지의 759,778세대)

"""

years =['2007','2008','2009','2010','2011','2012','2013','2014','2015','2016','2017','2018','2019','2020','2021']

columns_of_interest = ['소득분위별(1)', '특성별(1)','특성별(2)']+years
income_levels = ['1분위', '2분위', '3분위', '4분위', '5분위']
categories = ['성별', '연령별', '학력별', '종사자지위별']
genders = ['남성','여성']
ages = ['20대 이하', '30대', '40대', '50대', '60대 이상']
educations = ['중졸이하','고교재학/고졸', '대재이상']
employee_statuses = ['임금 근로자','일용 근로자','고용원이 없는 자영업자','고용원을 둔 사업주','무급가족 종사자','전업주부/학생/무직']


df1_filtered = df1[columns_of_interest]
"""# 하드 코딩된 값
years_input = '2020'  # 예시로 2020과 2021을 선택
income_level_input = "1분위"  # 사용자 입력 대신 하드코딩된 값
gender_input = "남성"  # 사용자 입력 대신 하드코딩된 값
age_input = "20대 이하"  # 사용자 입력 대신 하드코딩된 값
education_input = "중졸이하"  # 사용자 입력 대신 하드코딩된 값
employee_status_input = "임금 근로자"
"""
# 사용자 입력 받기
years_input = input("연도별 (2007~2021): ")
income_level_input = input("소득분위 (1-5): ") + "분위"
gender_input = input("성별 (남성/여성): ")

age_input = input("연령별 (20대 이하/30대/40대/50대/60대 이상): ")
education_input = input("학력별 (중졸이하/고교재학/고졸/대재이상): ")
employee_status_input = input("종사자지위별 (임금 근로자/일용 근로자/고용원이 없는 자영업자/고용원을 둔 사업주/무급가족 종사자/전업주부,학생,무직): ")
years_index = years.index('2007')+3


household_count = {
    '2007': 15707929,
    '2008': 15707929,
    '2009': 15707929,
    '2010': 15707929,
    '2011': 15707929,
    '2012': 15707929,
    '2013': 15707929,
    '2014': 15707929,
    '2015': 15707929,
    '2016': 15707929,
    '2017': 15707929,
    '2018': 20364055,
    '2019': 20364055,
    '2020': 20364055,
    '2021': 20364055
}



print()
print()


# 데이터 추출 및 배열화
data_dict = {}

for income_level in income_levels:
  if income_level == income_level_input:
    for category in categories:
        for gender in genders:
            if gender == gender_input:
                key = f"{category}_{income_level}_{gender}"
                data = df1_filtered[
                    (df1_filtered['소득분위별(1)'] == income_level) &
                    (df1_filtered['특성별(1)'] == category) &
                    (df1_filtered['특성별(2)'] == gender)
                ]

                # 선택된 연도에 대한 데이터만 추출
                if not data.empty:
                    data_dict[key] = data[years_input].values.flatten()


        for age in ages:
            if age == age_input:
                key = f"{category}_{income_level}_{age}"
                data = df1_filtered[
                    (df1_filtered['소득분위별(1)'] == income_level) &
                    (df1_filtered['특성별(1)'] == category) &
                    (df1_filtered['특성별(2)'] == age)
                ]
                if not data.empty:
                    data_dict[key] = data[years_input].values.flatten()

        for education in educations:
            if education == education_input:
                key = f"{category}_{income_level}_{education}"
                data = df1_filtered[
                    (df1_filtered['소득분위별(1)'] == income_level) &
                    (df1_filtered['특성별(1)'] == category) &
                    (df1_filtered['특성별(2)'] == education)
                ]
                if not data.empty:
                    data_dict[key] = data[years_input].values.flatten()

        for employee_status in employee_statuses:
            if employee_status == employee_status_input:
                key = f"{category}_{income_level}_{employee_status}"
                data = df1_filtered[
                    (df1_filtered['소득분위별(1)'] == income_level) &
                    (df1_filtered['특성별(1)'] == category) &
                    (df1_filtered['특성별(2)'] == employee_status)
                ]
                if not data.empty:
                    data_dict[key] = data[years_input].values.flatten()

cal = 1


for key, value in data_dict.items():
    print(f"{key}: {value}")
    cal *= (value/100)

cal = cal[0]
cal = round(cal,8)

# 결과 출력
print(f"{years_input}년도에 가구원: 가구 내 작년 한해 동안 소득이 있거나 소득 활동을 한 가구원 중 \n소득{income_level_input}  \n성별 : {gender_input}\n연령대 :  {age_input}\n"+
      f"교육수준 : {education_input}\n종사자지위 : {employee_status_input} \n해당하는 비율 ")
print("비율 :" + str(cal) + '%')


if int(years_input) < 2018:
    print(f"\n해당 연도 조사 기준 총 가구 수 : {int(household_count['2007'] )}")
    result = cal * household_count['2007'] / 100
else:
    print(f"\n해당 연도 조사 기준 총 가구 수 :  {int(household_count['2018'] )}")
    result = cal * household_count['2018'] / 100

print(f"해당 특성의 가구 수: {int(result)}")